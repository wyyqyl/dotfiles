" Author: Stephen Wang

" Section: General
" Vundle Config {{{
" Installation
" git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'airblade/vim-gitgutter'
Plugin 'bling/vim-airline'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'elzr/vim-json'
Plugin 'fatih/vim-go'
Plugin 'flazz/vim-colorschemes'
Plugin 'gmarik/Vundle.vim'
Plugin 'godlygeek/tabular'
Plugin 'honza/vim-snippets'
Plugin 'kien/ctrlp.vim'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'majutsushi/tagbar'
Plugin 'marijnh/tern_for_vim'
Plugin 'moll/vim-node'
Plugin 'pangloss/vim-javascript'
Plugin 'plasticboy/vim-markdown'
Plugin 'Raimondi/delimitMate'
Plugin 'rhysd/vim-clang-format'
Plugin 'rking/ag.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'SirVer/ultisnips'
Plugin 'sjl/gundo.vim'
Plugin 'suan/vim-instant-markdown'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'Valloric/YouCompleteMe'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
" }}}
" Colors {{{
if has("gui_running")
    set guioptions-=T  " no toolbar
    colorscheme badwolf
else
    set t_Co=256
    colorscheme molokai
endif
syntax enable           " enable syntax processing
" }}}
" Spaces & Tabs {{{
" http://vim.wikia.com/wiki/Indenting_source_code
set tabstop=4           " number of visual spaces per tab
set softtabstop=4       " number of spaces in tab when editing
set shiftwidth=4
set expandtab           " use spaces for tabs
set autoindent
set list
set listchars=tab:â–¸\ ,
autocmd Filetype javascript setl ts=2 sts=2 sw=2
" }}}
" UI Layout {{{
set number              " show line numbers
set showcmd             " show command in bottom bar
set cursorline          " highlight current line
set wildmenu
"set lazyredraw
set showmatch           " higlight matching parenthesis
set laststatus=2        " always show status line
set scrolloff=7         " keep 7 lines below and above the cursor
let g:netrw_liststyle = 3   " tree style
" }}}
" Backup {{{
set backupdir-=.
set backupdir^=/tmp
" }}}
" Searching {{{
set ignorecase          " ignore case when searching
set incsearch           " search as characters are entered
set hlsearch            " highlight all matches
" }}}
" Folding {{{
"=== folding ===
"set foldmethod=indent   " fold based on indent level
"set foldnestmax=10      " max 10 depth
"set foldenable          " don't fold files by default on open
nnoremap <space> za
"set foldlevelstart=10    " start with fold level of 1
" }}}
" Line Shortcuts {{{
nnoremap j gj
nnoremap gj j
nnoremap k gk
nnoremap gk k
"nnoremap B ^
"nnoremap E $
"nnoremap $ <nop>
"nnoremap ^ <nop>
nnoremap gV `[v`]
" }}}
" Leader Shortcuts {{{
let mapleader=","
noremap \ ,
nnoremap <leader>ev :vsp $MYVIMRC<cr>
nnoremap <leader>ez :vsp ~/.zshrc<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <leader>sz :source ~/.zshrc<cr>
nnoremap <leader><space> :noh<cr>
nnoremap <leader>1 :set number!<cr>
vnoremap <leader>y "+y
nnoremap <leader>p o<esc>"+p
nnoremap <leader>o o<esc>
nnoremap <leader>O O<esc>
nnoremap <leader>w :w<cr>
nnoremap <leader>q :q<cr>
nnoremap <leader>json :%!python -m json.tool<cr>
nnoremap <leader>ts :%s/\v[ \t]+$//g<cr>:w<cr>
nnoremap <leader>bd :b#<bar>bd#<cr>
nnoremap <leader>su :w !sudo tee % > /dev/null<cr>
" }}}
" Window {{{
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
" }}}
" Misc {{{
" allow backspacing over everything in insert mode
set backspace=indent,eol,start
" allow more Ex commands be stored
set history=512
au BufRead,BufNewFile *.md set filetype=markdown
" }}}

" Section: Plugins
" YouCompleteMe {{{
let g:ycm_confirm_extra_conf = 0
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
nnoremap <leader>jd :YcmCompleter GoTo<cr>
" }}}
" Syntastic {{{
if exists(':SyntasticInfo')
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wv = 0
endif
" }}}
" NERDTree {{{
" open a NERDTree automatically when vim starts up if no files were specified
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
let g:NERDTreeWinPos = "left"
let g:NERDTreeMapJumpNextSibling = 'T'
let g:NERDTreeMapJumpPrevSibling = 'S'
nnoremap <leader>nt :NERDTreeToggle<cr>
" }}}
" Tagbar {{{
nnoremap <leader>tb :TagbarToggle<cr>
" }}}
" CtrlP {{{
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlPMRU'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\vtmp/|[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(o|so|jar|bin|swp)$',
    \ }
let g:ctrlp_user_command = 'find %s -type f'
" }}}
" The Silver Searcher {{{
nnoremap <leader>ag :Ag -i<space>
nnoremap <leader>agg :Ag -i <c-r><c-w><cr>
" }}}
" Gundo {{{
nnoremap <leader>ud :GundoToggle<cr>
" }}}
" ultisnips {{{
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger = '<c-j>'
let g:UltiSnipsJumpForwardTrigger = '<c-j>'
let g:UltiSnipsJumpBackwardTrigger = '<c-k>'
let g:UltiSnipsListSnippets = '<c-l>'
" }}}
" vim-json {{{
let g:vim_json_syntax_conceal = 0
" }}}
" vim-airline {{{
let g:airline_theme = 'wombat'
let g:airline_powerline_fonts = 1
" }}}
" vim-markdown {{{
let g:vim_markdown_folding_disabled=1
" }}}
" vim-clang-format {{{
let g:clang_format#style_options = {
            \ "AccessModifierOffset" : -4,
            \ "AllowShortIfStatementsOnASingleLine" : "true",
            \ "AlwaysBreakTemplateDeclarations" : "true",
            \ "Standard" : "C++11"}
let g:clang_format#command = "clang-format-3.6"
" map to <Leader>cf in C++ code
autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
" Toggle auto formatting:
nmap <Leader>C :ClangFormatAutoToggle<CR>
" }}}

" vim:foldmethod=marker:foldlevel=0
