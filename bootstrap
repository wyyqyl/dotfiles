#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname ${BASH_SOURCE[0]})"
DOTFILES_ROOT=$(pwd)

set -e

echo ''

info () {
    printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
    printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
    printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
    printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
    echo ''
    exit
}

link_file () {
    local src=$1 dst=$2

    local overwrite= backup= skip=
    local action=

    if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
    then
        if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
        then
            local currentSrc="$(readlink $dst)"

            if [ "$currentSrc" == "$src" ]
            then
                skip=true;
            else
                user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
                    [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
                read -n 1 action
                case "$action" in
                    o )
                        overwrite=true;;
                    O )
                        overwrite_all=true;;
                    b )
                        backup=true;;
                    B )
                        backup_all=true;;
                    s )
                        skip=true;;
                    S )
                        skip_all=true;;
                    * )
                        ;;
                esac
            fi
        fi

        overwrite=${overwrite:-$overwrite_all}
        backup=${backup:-$backup_all}
        skip=${skip:-$skip_all}

        if [ "$overwrite" == "true" ]
        then
            rm -rf "$dst"
            success "removed $dst"
        fi

        if [ "$backup" == "true" ]
        then
            mv "$dst" "${dst}.backup"
            success "moved $dst to ${dst}.backup"
        fi

        if [ "$skip" == "true" ]
        then
            success "skipped $src"
        fi
    fi

    if [ "$skip" != "true" ]  # "false" or empty
    then
        ln -s "$1" "$2"
        success "linked $1 to $2"
    fi
}

install_dependencies () {
    info 'installing git zsh vim tmux the_silver_searcher...\n'
    if [[ `uname` == 'Darwin' ]]; then
        brew install git zsh vim tmux the_silver_searcher
    else
        sudo apt-get install git zsh vim tmux silversearcher-ag
    fi
    info 'installing powerline font...\n'
    git clone git://github.com/powerline/fonts.git .powerlinefonts
    cd .powerlinefonts && ./install.sh
}

install_dotfiles () {
    info 'installing dotfiles'

    local overwrite_all=false backup_all=false skip_all=false

    for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink')
    do
        dst="$HOME/.$(basename "${src%.*}")"
        link_file "$src" "$dst"
    done
}

install_vundle () {
    vundle_dir=$HOME/.vim/bundle/Vundle.vim
    if [ -d $vundle_dir ]
    then
        success 'vundle was already installed'
    else
        git clone https://github.com/gmarik/Vundle.vim.git $vundle_dir
    fi
    vim +PluginInstall +qall
}

install_zsh () {
    ohmyzsh_dir=$HOME/.oh-my-zsh
    if [ -d $ohmyzsh_dir ]
    then
        success "oh-my-zsh was already installed"
    else
        git clone git://github.com/robbyrussell/oh-my-zsh.git $ohmyzsh_dir
    fi
    if [ $SHELL != '/bin/zsh' ]
    then
        chsh -s /bin/zsh
    fi
}

install_dotfiles
install_dependencies
install_vundle
install_zsh

echo ''
echo '  All installed!'
